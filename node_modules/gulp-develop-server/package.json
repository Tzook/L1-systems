{
  "name": "gulp-develop-server",
  "version": "0.2.5",
  "auther": "narirou <narirou.github@gmail.com>",
  "description": "run node.js server and automatically restart for your development.",
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/narirou/gulp-develop-server.git"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 3000 ./test/test"
  },
  "keywords": [
    "gulpplugin",
    "gulp",
    "server",
    "restart",
    "express"
  ],
  "dependencies": {
    "gulp-util": "*",
    "lodash": "^2.4.1"
  },
  "devDependencies": {
    "express": "^4.4.5",
    "mocha": "*",
    "should": "*",
    "sinon": "*",
    "supertest": "*"
  },
  "license": "MIT",
  "readme": "gulp-develop-server\r\n====================\r\n\r\n> run your node.js server and automatically restart with gulp.\r\n\r\n[![Build Status](http://img.shields.io/travis/narirou/gulp-develop-server/master.svg?style=flat-square)](https://travis-ci.org/narirou/gulp-develop-server)\r\n[![Npm Modules](http://img.shields.io/npm/v/gulp-develop-server.svg?style=flat-square)](https://www.npmjs.org/package/gulp-develop-server)\r\n[![MIT Licensed](http://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](http://opensource.org/licenses/MIT)\r\n\r\n\r\ngulp-develop-server is a development assistant for node.js server that runs\r\nthe process and automatically restarts it when a file is modified. \r\n\r\n\r\n\r\ninstallation\r\n------------\r\n\r\n```bash\r\nnpm install gulp-develop-server --save-dev\r\n```\r\n\r\n\r\n\r\nusage\r\n-----\r\n\r\n```javascript\r\nvar gulp   = require( 'gulp' ),\r\n    server = require( 'gulp-develop-server' );\r\n\r\n// run server\r\ngulp.task( 'server:start', function() {\r\n    server.listen( { path: './app.js' } );\r\n});\r\n\r\n// restart server if app.js changed\r\ngulp.task( 'server:restart', function() {\r\n    gulp.watch( [ './app.js' ], server.restart );\r\n});\r\n```\r\n\r\n\r\n\r\napi\r\n---\r\n\r\n###server.listen( options[, callback] )\r\n\r\n**options {Object}**  \r\n\r\n- `path`  \r\n    - type: {String}\r\n    - exapmle: `'./your_node_app.js'`\r\n    - Your node application path. This option is required.\r\n\r\n- `env`  \r\n    - type: {Object}  \r\n    - default: `{ NODE_ENV: 'development' }` (extends current `process.env`)  \r\n    - example: `{ PORT: 3000, NODE_ENV: 'production' }`  \r\n    - Environment settings of your server.  \r\n\r\n- `execArgv`  \r\n    - type: {Array}  \r\n    - example: `[ '--harmony' ]`  \r\n    - Run node process with this options.  \r\n\r\n- `delay`   \r\n    - type: {Number}  \r\n    - default: `600`  \r\n    - If not receive an error from the server after `options.delay` seconds, regard the server listening success.\r\n    - This option needs to adjust according to your application's initialize time.\r\n    - If this option set `0`, it will only check `successMessage`.  \r\n\r\n- `successMessage`  \r\n    - type: {RegExp}\r\n    - default: `/^server listening$/`  \r\n    - If your application send a specific message by `process.send` method, regard the server listening success.\r\n\r\n- `killSignal`  \r\n    - type: {String}\r\n    - default: `SIGTERM`\r\n\r\n**callback( error )**  \r\n\r\n\r\n###server.restart( [callback] ) / server.changed( [callback] )\r\n\r\n**callback( error )**  \r\n\r\n\r\n###server( [options] )\r\n\r\nCreate a `Transform` stream.\r\nRestart the server at once when this stream gets files.\r\n\r\n\r\n###server.kill( [signal, callback] )\r\n\r\nSend kill signal to the server process.  \r\n**signal {String}**  \r\n**callback( error )**  \r\n\r\n\r\n###server.reset( [signal, callback] )\r\n\r\nSend kill signal to the server process and reset the options to default.   \r\n**signal {String}**  \r\n**callback( error )**  \r\n\r\n\r\n\r\nmore examples\r\n-------------\r\n\r\n####with [gulp-livereload](https://github.com/vohof/gulp-livereload):\r\n(recommend)\r\n\r\n```javascript\r\nvar gulp       = require( 'gulp' ),\r\n    server     = require( 'gulp-develop-server' ),\r\n    livereload = require( 'gulp-livereload' );\r\n\r\nvar options = {\r\n    path: './apps/app.js'\r\n};\r\n\r\ngulp.task( 'server:start', function() {\r\n    server.listen( options, livereload.listen );\r\n});\r\n\r\n// If server scripts change, restart the server and then livereload.\r\ngulp.task( 'default', [ 'server:start' ], function() {\r\n    \r\n    function restart( file ) {\r\n        server.changed( function( error ) {\r\n            if( ! error ) livereload.changed( file.path );\r\n        });\r\n    }\r\n\r\n    gulp.watch( [ './apps/app.js', './routes/*.js' ] ).on( 'change', restart );\r\n});\r\n```\r\n\r\n\r\n####use as a stream:\r\n\r\n```javascript\r\nvar gulp       = require( 'gulp' ),\r\n    server     = require( 'gulp-develop-server' ),\r\n    livereload = require( 'gulp-livereload' ),\r\n    coffee     = require( 'gulp-coffee' );\r\n\r\nvar options = {\r\n    path: './apps/app.js',\r\n    execArgv: [ '--harmony' ]\r\n};\r\n\r\n// If server side's coffee files changed, compile these files,\r\n// restart the server and then livereload.\r\ngulp.task( 'server:restart', function() {\r\n    gulp.src( './src/*.coffee' )\r\n        .pipe( coffee() )\r\n        .pipe( gulp.dest( './apps' ) )\r\n        .pipe( server( options ) )\r\n        .pipe( livereload() );\r\n});\r\n\r\ngulp.task( 'default', [ 'server:restart' ], function() {\r\n    gulp.watch( './src/*.coffee', [ 'server:restart' ] );\r\n});\r\n```\r\n\r\n\r\n\r\nthanks\r\n------\r\n\r\n[@pronebird](https://github.com/pronebird)  \r\n[@vkareh](https://github.com/vkareh)\r\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/narirou/gulp-develop-server/issues"
  },
  "_id": "gulp-develop-server@0.2.5",
  "_from": "gulp-develop-server@^0.2.4"
}
